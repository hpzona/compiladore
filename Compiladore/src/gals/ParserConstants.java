package gals;

public interface ParserConstants {

    int START_SYMBOL = 58;

    int FIRST_NON_TERMINAL = 58;
    int FIRST_SEMANTIC_ACTION = 92;

    int[][] PARSER_TABLE
            = {
                {-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 77, 78, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, 37, 34, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, 36, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, -1, 64, 63, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, 63, 64, 64, -1, 64, 64, 64, -1, 64, -1, 64, -1, 64, 64, 64, 63, 63, -1, -1, -1, 64, 64, 64},
                {-1, 72, 73, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 73, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, 2, 2, -1, -1, -1, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, 7, 8, -1, -1, -1, 4, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, 13, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 25, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, 42, -1, 41, -1, -1, 43, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1},
                {-1, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 44, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, 56, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 56, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, 49, 49, -1, 48, 48, 48, -1, 49, -1, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, 53},
                {-1, 62, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, 62, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, -1, 57, -1, -1, -1, -1, -1, 58, -1, -1, -1, -1, -1, -1, -1, -1, 58, 58, -1, 58, 58, 58, -1, 58, -1, 58, -1, 58, 57, 57, -1, -1, -1, -1, -1, 58, 58, 58},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 60, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 66, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 76, -1, -1, 76, 76, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, 76, 76, 76, -1, 76, 76, 76, 74, 76, 75, 76, -1, 76, 76, 76, 76, 76, -1, -1, -1, 76, 76, 76},
                {-1, -1, 83, 79, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}
            };

    int[][] PRODUCTIONS
            = {
                {6, 2, 193, 36, 59, 38},
                {64, 72, 66},
                {67, 68, 194, 69, 195, 70, 196, 36, 64},
                {0},
                {13, 197},
                {28, 198},
                {14, 199},
                {8, 200},
                {9, 44, 60, 201, 45},
                {202, 44, 60, 203, 45},
                {204},
                {2, 205, 71},
                {37, 69},
                {0},
                {206, 41, 60, 207},
                {208},
                {65, 36, 72},
                {0},
                {31, 2, 209, 73, 210, 74, 211, 36, 59, 212},
                {42, 77, 213, 69, 214, 52, 67, 215, 75, 43},
                {0},
                {36, 77, 213, 69, 214, 52, 67, 215, 75},
                {0},
                {52, 67, 216},
                {217},
                {32, 218},
                {33, 219},
                {46, 61, 78, 47},
                {36, 61, 78},
                {0},
                {2, 220, 79},
                {66},
                {16, 80, 221, 17, 61, 81},
                {30, 80, 221, 27, 61},
                {19, 42, 222, 69, 43},
                {20, 42, 223, 82, 43},
                {34, 80, 224},
                {0},
                {18, 61},
                {0},
                {225, 53, 80, 226},
                {44, 227, 80, 228, 45, 53, 80},
                {42, 229, 230, 82, 43, 231},
                {232},
                {80, 233, 76},
                {37, 80, 233, 76},
                {0},
                {83, 234, 84},
                {85, 83, 235},
                {0},
                {41, 236},
                {40, 237},
                {39, 238},
                {57, 239},
                {56, 240},
                {55, 241},
                {86, 242, 87},
                {88, 243, 86, 244, 87},
                {0},
                {48, 245},
                {49, 246},
                {21, 247},
                {63, 248, 62},
                {89, 249, 63, 250, 62},
                {0},
                {50, 251},
                {51, 252},
                {22, 253},
                {35, 254},
                {23, 255, 63, 256},
                {49, 257, 63, 258},
                {42, 259, 80, 43, 260},
                {2, 220, 90, 261},
                {91, 262},
                {42, 263, 80, 233, 76, 43, 264},
                {44, 227, 80, 265, 45},
                {266},
                {2, 267},
                {91},
                {4, 268},
                {5, 269},
                {24, 270},
                {25, 271},
                {3, 272}
            };
    String[] PARSER_ERROR
            = {
                "",
                "Era esperado fim do programa",
                "Era esperado um id",
                "Era esperado um literal",
                "Era esperado um número inteiro",
                "Era esperado um número real",
                "Era esperado programa",
                "Era esperado var",
                "Era esperado caracter",
                "Era esperado cadeia",
                "Era esperado procedimento",
                "Era esperado inicio",
                "Era esperado fim",
                "Era esperado inteiro",
                "Era esperado booleano",
                "Era esperado funcao",
                "Era esperado se",
                "Era esperado entao",
                "Era esperado senao",
                "Era esperado leia",
                "Era esperado escreva",
                "Era esperado ou",
                "Era esperado e",
                "Era esperado nao",
                "Era esperado falso",
                "Era esperado verdadeiro",
                "Era esperado de",
                "Era esperado faca",
                "Era esperado real",
                "Era esperado vetor",
                "Era esperado enquanto",
                "Era esperado metodo",
                "Era esperado ref",
                "Era esperado val",
                "Era esperado retorne",
                "Era esperado div",
                "Era esperado \";\"",
                "Era esperado \",\"",
                "Era esperado \".\"",
                "Era esperado \">\"",
                "Era esperado \"<\"",
                "Era esperado \"=\"",
                "Era esperado \"(\"",
                "Era esperado \")\"",
                "Era esperado \"[\"",
                "Era esperado \"]\"",
                "Era esperado \"{\"",
                "Era esperado \"}\"",
                "Era esperado \"+\"",
                "Era esperado \"-\"",
                "Era esperado \"*\"",
                "Era esperado \"/\"",
                "Era esperado \":\"",
                "Era esperado \":=\"",
                "Era esperado \"..\"",
                "Era esperado \"<>\"",
                "Era esperado \"<=\"",
                "Era esperado \">=\"",
                "Estrutura de programa inválida.\nEra esperado: programa",
                "Bloco de código inválido.\nEra esperado: caracter, cadeia, inteiro, booleano, real, metodo, \"{\"",
                "Constante inválida.\nEra esperado: id, literal, num_int, num_real, falso, verdadeiro",
                "Comando inválido.\nEra esperado: î, id, se, leia, escreva, enquanto, retorne, \"{\"",
                "Termo inválido.\nEra esperado: î, e, div, \"*\", \"/\"",
                "Fator inválido.\nEra esperado: id, literal, num_int, num_real, nao, falso, verdadeiro, \"(\", \"-\"",
                "Declaração de variável inválida.\nEra esperado: î, caracter, cadeia, inteiro, booleano, real",
                "Declaração de método inválida.\nEra esperado: metodo",
                "Comando composto inválido.\nEra esperado: \"{\"",
                "Tipo inválido.\nEra esperado: caracter, cadeia, inteiro, booleano, real",
                "Dimensão inválida.\nEra esperado: î, \"[\"",
                "Lista de identificadores inválida.\nEra esperado: id",
                "Fator constante inválido.\nEra esperado: î, \"=\"",
                "Lista de identificadores inválida.\nEra esperado: î, \",\"",
                "Declaração de métodos inválida.\nEra esperado: î, metodo",
                "Estrutura de paramêtro inválida.\nEra esperado: î, \"(\"",
                "Tipo do método inválido.\nEra esperado: î, \":\"",
                "Lista de paramêtros inválida.\nEra esperado: î, \";\"",
                "Lista de expressões inválida.\nEra esperado: î, \",\"",
                "Parametro inválido, deve ser ref ou val.\nEra esperado: ref, val",
                "Comando inválido.\nEra esperado: î, \";\"",
                "Comando inválido.\nEra esperado: î, \"(\", \"[\", \":=\"",
                "Expressão inválida.\nEra esperado: id, literal, num_int, num_real, nao, falso, verdadeiro, \"(\", \"-\"",
                "Estrutura senao inválida.\nEra esperado: î, senao",
                "Lista de expressões inválida.\nEra esperado: id, literal, num_int, num_real, nao, falso, verdadeiro, \"(\", \"-\"",
                "Expressão simples inválida.\nEra esperado: id, literal, num_int, num_real, nao, falso, verdadeiro, \"(\", \"-\"",
                "Expressão inválida.\nEra esperado: î, \">\", \"<\", \"=\", \"<>\", \"<=\", \">=\"",
                "Operador relacional inválido.\nEra esperado: \">\", \"<\", \"=\", \"<>\", \"<=\", \">=\"",
                "Termo inválido.\nEra esperado: id, literal, num_int, num_real, nao, falso, verdadeiro, \"(\", \"-\"",
                "Expressão simples inválida.\nEra esperado: î, ou, \"+\", \"-\"",
                "Operador aritmético inválido.\nEra esperado: ou, \"+\", \"-\"",
                "Operador aritmético inválido.\nEra esperado: e, div, \"*\", \"/\"",
                "Variável inválida.\nEra esperado: î, \"(\", \"[\"",
                "Constante explícita inválido.\nEra esperado: literal, num_int, num_real, falso, verdadeiro"
            };
}
